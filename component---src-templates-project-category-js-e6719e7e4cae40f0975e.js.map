{"version":3,"file":"component---src-templates-project-category-js-e6719e7e4cae40f0975e.js","mappings":"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","sources":["webpack://greg-obis-portfolio/./src/components/DynamicHero/DynamicHero.js","webpack://greg-obis-portfolio/./src/components/ProjectFilterButtons/ProjectFilterButtons.js","webpack://greg-obis-portfolio/./src/components/ProjectList/ProjectList.js","webpack://greg-obis-portfolio/./src/components/LazyLoadingEmbed/LazyLoadingEmbed.module.css","webpack://greg-obis-portfolio/./src/components/LazyLoadingEmbed/LazyLoadingEmbed.js","webpack://greg-obis-portfolio/./src/components/ProjectPreview/ProjectPreview.js","webpack://greg-obis-portfolio/./src/components/ProjectPreview/ProjectPreview.module.css","webpack://greg-obis-portfolio/./src/templates/project-category.js","webpack://greg-obis-portfolio/./node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["import React from 'react'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst DynamicHero = ({ color, title=\"Projects\" }) => {\n  return (\n    <Container fluid className={`py-5 ${color}--bg`}>\n      <Container className=\"my-5\">\n        <Row>\n          <Col>\n            <h1 className=\"text-center\">{title}</h1>  \n          </Col>\n        </Row>\n      </Container>\n    </Container>\n  )\n}\nexport default DynamicHero\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button'\n\nconst ProjectFilterButtons = ({categories}) => {\n    return (\n        <Container>\n            <Row className=\"my-5\">\n                <Col xs={12} md={6} lg={3} className=\"my-1\">\n                    <Button bsPrefix=\"custom-btn\" className=\"btn malachite--btn w-100\" href=\"/projects\">All</Button>\n                </Col>\n                {categories.map(({node}, index) => \n                    <Col key={index} xs={12} md={6} lg={3} className=\"my-1\">\n                        <Button bsPrefix=\"custom-btn\" className={`btn ${node.color.name}--btn w-100`} href={`/projects/${node.slug}`}>\n                            {node.title}\n                        </Button>\n                    </Col>\n                )}\n            </Row>\n        </Container>\n    )\n}\n\nexport default ProjectFilterButtons\n","import React from 'react'\nimport ProjectPreview from '../ProjectPreview'\nimport Row from \"react-bootstrap/Row\"\n\nconst ProjectList = ({ projects }) => {\n  return (\n    <Row>\n      {projects.map(({ node }, index) => {\n        return (\n            <ProjectPreview key={index} project={node} />\n        )\n      })}\n    </Row>\n  )\n}\nexport default ProjectList\n","// extracted by mini-css-extract-plugin\nexport var iframe = \"LazyLoadingEmbed-module--iframe--93017\";","import React, { useState, useEffect, useRef } from 'react'\nimport * as styles from \"./LazyLoadingEmbed.module.css\"\n\nconst LazyLoadingEmbed = (embed, album) => {\n    const [isVisible, setIsVisible] = useState(false);\n    const iframeRef = useRef(null);\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            ([entry]) => {\n                if (entry.isIntersecting) {\n                    setIsVisible(true);\n                    observer.disconnect(); // Stop observing once visible\n                }\n            },\n            { threshold: 0.1 } // Trigger when 10% of the component is visible\n        );\n\n        if (iframeRef.current) {\n            observer.observe(iframeRef.current);\n        }\n\n        return () => {\n            if (iframeRef.current) {\n                observer.unobserve(iframeRef.current);\n            }\n        };\n    }, []);\n\n    const embedSplit = embed.embed.embed.split(' ');\n    const src = embedSplit.find((string) => {\n        return string.startsWith(\"src\")\n    })\n    const srcSplit = src.split(\"/\")\n    const albumId = srcSplit.find((string) => {\n        return string.startsWith(\"album=\")\n    })\n    const formattedSrcUrl = `https://bandcamp.com/EmbeddedPlayer/${albumId}/size=large/bgcol=ffffff/linkcol=0687f5/minimal=true/transparent=true/`\n    const href = embedSplit.find((string) => {\n        return string.startsWith(\"href\")\n    })\n\n    return (\n        <div ref={iframeRef} className={styles.lazyEmbedContainer}>\n            {isVisible && (\n                <iframe\n                    title={`${album} bandcamp embed`}\n                    width=\"170px\"\n                    height=\"170px\"\n                    className={styles.iframe}\n                    src={formattedSrcUrl}\n                    seamless\n                />\n            )}\n        </div>\n    )\n}\n\nexport default LazyLoadingEmbed\n","import React from 'react'\nimport LazyLoadingEmbed from '../LazyLoadingEmbed'\nimport Col from \"react-bootstrap/Col\"\nimport * as styles from \"./ProjectPreview.module.css\"\n\nconst ProjectPreview = ({ project }) => {\n  const {band, album, label, year, embed, categories}= project\n  \nreturn (\n  <Col sm=\"6\" md=\"4\" className=\"py-4 text-center d-flex flex-column justify-content-between align-items-center mx-auto\">\n  <div className=\"my-3\">\n    <span className={styles.bandName}>{ band }</span>\n    <span className={styles.albumName}>{ album }</span>\n    <span className={styles.categories}>\n    {categories.map((category, index)=> \n      <span key={index}>\n        <span className={`darken-${category.color.name}--text`}>\n          {category.title}\n        </span>\n        <span>{index !== categories.length - 1 ? ' | ' : ''}</span>\n      </span>\n    )}\n    </span>\n  </div>\n  <LazyLoadingEmbed embed={embed} album={album}/>\n  <div className=\"my-3\">\n    <span className={styles.label}>{ label }</span>\n    <span className={styles.year}>{ year }</span>\n  </div>\n</Col>\n)}\n\nexport default ProjectPreview","// extracted by mini-css-extract-plugin\nexport var albumName = \"ProjectPreview-module--albumName--0211c\";\nexport var bandName = \"ProjectPreview-module--bandName--ccdad\";\nexport var categories = \"ProjectPreview-module--categories--b4236\";\nexport var iframe = \"ProjectPreview-module--iframe--40e77\";\nexport var label = \"ProjectPreview-module--label--71193\";\nexport var year = \"ProjectPreview-module--year--b01e2\";","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Helmet } from 'react-helmet'\nimport Layout from '../components/Layout'\nimport ProjectFilterButtons from '../components/ProjectFilterButtons'\nimport Container from \"react-bootstrap/Container\"\nimport DynamicHero from '../components/DynamicHero'\nimport ProjectList from '../components/ProjectList'\n\n\nconst Projects = ({location, data, pageContext}) => {\n  const { projectFilter, color, filterTitle } = pageContext\n  const siteTitle = data.site.siteMetadata.title  \n  const categories = data.allContentfulCategory.edges\n  const projects = data.filteredProjects.edges\n\n  return (\n    <Layout location={location.pathname}>\n        <Helmet>\n        <title>{`${siteTitle} | ${projectFilter} Projects`}</title>\n            <meta name='description' content= 'Greg Obis is an audio engineer that has worked with artists on labels such as Sub Pop, Matador, ANTI-, Car Park, Sacred Bones, Numero Group, Fire Talk, and International Anthem. A personable and skilled audio engineer, Greg specializes in mastering, recording, and mixing records. Contact him to discuss your project.' />\n        </Helmet> \n        <div className=\"wrapper\">\n          <DynamicHero color={color} title={filterTitle}/>\n          <Container className=\"py-5\">\n            <ProjectFilterButtons categories={categories}/>\n            <ProjectList projects={projects}/>\n          </Container>\n        </div>\n    </Layout>\n  )\n}\n\nexport default Projects\n\nexport const pageQuery = graphql`\n    query($projectFilter: [String]){\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allContentfulCategory {\n            edges {\n                node {\n                title\n                color {\n                    name\n                    colorPicker\n                }\n                slug\n                }\n            }\n        }\n        filteredProjects: allContentfulProject(\n            sort: {year: DESC}\n            filter: {categories: {elemMatch: {slug: {in: $projectFilter}}}}\n            ) {\n            edges {\n                node {\n                album\n                band\n                featured\n                categories {\n                    title\n                    color {\n                        name\n                        colorPicker\n                    }\n                }\n                year\n                label\n                embed {\n                    embed\n                }\n                }\n            }\n        }\n    }\n`\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;"],"names":["_ref","color","title","React","Container","fluid","className","Row","Col","categories","xs","md","lg","Button","bsPrefix","href","map","_ref2","index","node","key","name","slug","projects","ProjectPreview","project","iframe","LazyLoadingEmbed","embed","album","isVisible","setIsVisible","useState","iframeRef","useRef","useEffect","observer","IntersectionObserver","entry","isIntersecting","disconnect","threshold","current","observe","unobserve","embedSplit","split","formattedSrcUrl","find","string","startsWith","ref","styles","width","height","src","seamless","band","label","year","sm","category","length","location","data","pageContext","projectFilter","filterTitle","siteTitle","site","siteMetadata","allContentfulCategory","edges","filteredProjects","Layout","pathname","Helmet","content","DynamicHero","ProjectFilterButtons","ProjectList","as","variant","size","active","disabled","props","prefix","buttonProps","tagName","Component","displayName"],"sourceRoot":""}